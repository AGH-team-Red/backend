generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "npx zod-prisma-types"
  output           = "zod"
  useTypeAssertions = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LabelingLanguage {
  pl
  en
}

enum TaskType {
  labeling
  crossChecking
}

enum OrderStatus {
  active
  pending
  completed
  expired
}

model Order {
  id               String           @id @default(cuid())
  name             String
  description      String
  startDate        DateTime
  endDate          DateTime
  budget           Decimal          @db.Decimal(10, 2)
  labelingLanguage LabelingLanguage
  datasetId        String           @unique
  dataset          Dataset          @relation(fields: [datasetId], references: [id])
}

model Dataset {
  id              String           @id @default(cuid())
  name            String
  description     String
  minSamplesCount Int
  features        DatasetFeature[]
  Order           Order?
  Task            Task?
}

model DatasetFeature {
  id              String                  @id @default(cuid())
  name            String
  description     String
  imageGuidelines String
  labelGuidelines String
  type            String
  dataset         Dataset                 @relation(fields: [datasetId], references: [id])
  datasetId       String
  examples        DatasetFeatureExample[]
}

model DatasetFeatureExample {
  id        String         @id @default(cuid())
  imageUrl  String
  label     String
  feature   DatasetFeature @relation(fields: [featureId], references: [id])
  featureId String
}

model Task {
  id          String    @id @default(cuid())
  datasetId   String    @unique
  dataset     Dataset   @relation(fields: [datasetId], references: [id])
  type        TaskType
  endDate     DateTime
}
